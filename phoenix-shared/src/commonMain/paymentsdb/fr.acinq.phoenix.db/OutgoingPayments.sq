import fr.acinq.eclair.db.HopDesc;
import fr.acinq.phoenix.db.SqlitePaymentsDb.OutgoingFinalFailureDbEnum;
import fr.acinq.phoenix.db.SqlitePaymentsDb.OutgoingPartFailureDbEnum;
import kotlin.collections.List;

PRAGMA foreign_keys = 1;

-- outgoing payments
-- Stores an outgoing payment in a flat row. Some columns can be null.
CREATE TABLE IF NOT EXISTS outgoing_payments (
    id TEXT NOT NULL PRIMARY KEY,
    recipient_amount_msat INTEGER NOT NULL,
    recipient_node_id TEXT NOT NULL,
    payment_hash BLOB NOT NULL,
    created_at INTEGER NOT NULL,
    -- details
    normal_payment_request TEXT DEFAULT NULL,
    keysend_preimage BLOB DEFAULT NULL,
    swapout_address TEXT DEFAULT NULL,
    -- status
    final_failure TEXT AS OutgoingFinalFailureDbEnum DEFAULT NULL,
    preimage BLOB DEFAULT NULL,
    completed_at INTEGER DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS outgoing_payment_parts (
    part_id TEXT NOT NULL PRIMARY KEY,
    parent_id TEXT NOT NULL,
    amount_msat INTEGER NOT NULL,
    route TEXT AS List<HopDesc> NOT NULL,
    created_at INTEGER NOT NULL,
    -- status
    preimage BLOB DEFAULT NULL,
    err_code INTEGER DEFAULT NULL,
    err_message TEXT DEFAULT NULL,
    completed_at INTEGER DEFAULT NULL,

    FOREIGN KEY(parent_id) REFERENCES outgoing_payments(id)
);

-- queries

addOutgoingPayment:
INSERT INTO outgoing_payments (id, recipient_amount_msat, recipient_node_id, payment_hash, created_at, normal_payment_request, keysend_preimage, swapout_address) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

addOutgoingPart:
INSERT INTO outgoing_payment_parts (part_id, parent_id, amount_msat, route, created_at) VALUES (?, ?, ?, ?, ?);

succeedOutgoingPart:
UPDATE outgoing_payment_parts SET preimage=?, completed_at=? WHERE part_id=?;
succeedOutgoingPayment:
UPDATE outgoing_payments SET preimage=?, completed_at=? WHERE id=?;

failOutgoingPart:
UPDATE outgoing_payment_parts SET err_code=?, err_message=?, completed_at=? WHERE part_id=?;
failOutgoingPayment:
UPDATE outgoing_payments SET final_failure=?, completed_at=? WHERE id=?;

getOutgoingPart:
SELECT *
FROM outgoing_payment_parts
WHERE part_id=?;

deleteOutgoingPart:
DELETE FROM outgoing_payment_parts
WHERE part_id=?;

getOutgoingPayment:
SELECT parent.id, parent.recipient_amount_msat, parent.recipient_node_id, parent.payment_hash, parent.created_at, parent.normal_payment_request, parent.keysend_preimage, parent.swapout_address, parent.final_failure, parent.preimage, parent.completed_at,
       parts.part_id, parts.amount_msat, parts.route, parts.created_at AS part_created_at, parts.preimage AS part_preimage, parts.completed_at AS part_completed_at, parts.err_code, parts.err_message
FROM outgoing_payments AS parent
LEFT OUTER JOIN outgoing_payment_parts AS parts ON parts.parent_id = parent.id
WHERE parent.id=?;

listOutgoingForPaymentHash:
SELECT parent.id, parent.recipient_amount_msat, parent.recipient_node_id, parent.payment_hash, parent.created_at, parent.normal_payment_request, parent.keysend_preimage, parent.swapout_address, parent.final_failure, parent.preimage, parent.completed_at,
       parts.part_id, parts.amount_msat, parts.route, parts.created_at AS part_created_at, parts.preimage AS part_preimage, parts.completed_at AS part_completed_at, parts.err_code, parts.err_message
FROM outgoing_payments AS parent
LEFT OUTER JOIN outgoing_payment_parts AS parts ON parts.parent_id = parent.id
WHERE payment_hash=?;

listOutgoingInOffset:
SELECT parent.id, parent.recipient_amount_msat, parent.recipient_node_id, parent.payment_hash, parent.created_at, parent.normal_payment_request, parent.keysend_preimage, parent.swapout_address, parent.final_failure, parent.preimage, parent.completed_at,
       parts.part_id, parts.amount_msat, parts.route, parts.created_at AS part_created_at, parts.preimage AS part_preimage, parts.completed_at AS part_completed_at, parts.err_code, parts.err_message
FROM outgoing_payments AS parent
LEFT OUTER JOIN outgoing_payment_parts AS parts ON parts.parent_id = parent.id
ORDER BY parent.completed_at DESC, parent.id DESC
LIMIT ?, ?;

-- use this in a `transaction` block to know how many rows were changed after an UPDATE
changes:
SELECT changes();
